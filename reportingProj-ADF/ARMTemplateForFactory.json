{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "reportingProj-ADF"
		},
		"ls_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob'"
		},
		"ls_onPremsSqlserver_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_onPremsSqlserver'",
			"defaultValue": "integrated security=True;Data Source=DESKTOP-QBLMT5V\\SQLEXPRESS;Initial Catalog=reportingProject"
		},
		"ls_onPremsSqlserver_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_onPremsSqlserver'"
		},
		"ls_reportingProjSQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_reportingProjSQLServer'"
		},
		"ls_reportingProj_DBW_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'ls_reportingProj_DBW'"
		},
		"ls_sharepoint_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sharepoint'"
		},
		"ls_onPremsSqlserver_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DESKTOP-QBLMT5V\\ADMIN"
		},
		"ls_reportingProj_DBW_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0923-025914-jwgkr9v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1 Master Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Hydration Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "master start logs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 Hydration File Movement",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Full Load Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Hydration Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 1 Full Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Incremental Load Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Hydration Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 2 Incremental Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Merge_DBW Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Incremental Load Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Full Load Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "4 Data_Merge_DBW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Transformation Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Merge_DBW Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "5 reportingProj-Transformation-DBW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Alerts On Pipeline Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Merge_DBW Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://prod-18.centralindia.logic.azure.com:443/workflows/0653482000c04c56a250dff4a468760c/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=gKe3b40-OA-ejPhNln-bhWT-Pu25r0i8BaszX_74GFM",
							"body": {
								"value": "{\n    \"Pipeline\": \"@{pipeline().Pipeline}\",\n    \"ErrorMessage\": \"@{activity('Execute Merge_DBW Pipeline').error.message}\",\n    \"DataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"RunId\": \"@{pipeline().RunId}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email Alerts On Pipeline Failure_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Transformation Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://prod-18.centralindia.logic.azure.com:443/workflows/0653482000c04c56a250dff4a468760c/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=gKe3b40-OA-ejPhNln-bhWT-Pu25r0i8BaszX_74GFM",
							"body": {
								"value": "{\n    \"Pipeline\": \"@{pipeline().Pipeline}\",\n    \"ErrorMessage\": \"@{activity('Execute Transformation Pipeline').error.message}\",\n    \"DataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"RunId\": \"@{pipeline().RunId}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "master start logs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_ADFStartLogs]",
								"storedProcedureParameters": {
									"p_ADFName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"p_ParentPipelineName": {
										"type": "String",
										"value": null
									},
									"p_ParentRunId": {
										"type": "String",
										"value": null
									},
									"p_PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"p_RunId": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"p_StartTime": {
										"type": "DateTime",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onPremsSqlServer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "master Failure end logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Merge_DBW Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": {
										"value": "@activity('Execute Merge_DBW Pipeline').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('master start logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Fail')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "master success end logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Merge_DBW Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": "",
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('master start logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Success')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "master success end logs for transform pl",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Transformation Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": "",
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('master start logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Success')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "master Failure end logs for transforms pl",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Transformation Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": {
										"value": "@activity('Execute Transformation Pipeline').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('master start logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Fail')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"V_Status_Success": {
						"type": "String",
						"defaultValue": "Success"
					},
					"V_Status_Fail": {
						"type": "String",
						"defaultValue": "Fail"
					}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-27T14:00:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/2 Hydration File Movement')]",
				"[concat(variables('factoryId'), '/pipelines/3 1 Full Load')]",
				"[concat(variables('factoryId'), '/pipelines/3 2 Incremental Load')]",
				"[concat(variables('factoryId'), '/pipelines/4 Data_Merge_DBW')]",
				"[concat(variables('factoryId'), '/pipelines/5 reportingProj-Transformation-DBW')]",
				"[concat(variables('factoryId'), '/datasets/ds_onPremsSqlServer')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onPremsSqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Hydration File Movement')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Hydration File From SharePoint to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start Logs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sharepoint",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_hydration",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Hydration File From Blob to Azure Sql DB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Hydration File From SharePoint to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table [client].[hydration];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_hydration",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_reportingProjSQLServer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Start Logs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_ADFStartLogs]",
								"storedProcedureParameters": {
									"p_ADFName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"p_ParentPipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										}
									},
									"p_ParentRunId": {
										"type": "String",
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										}
									},
									"p_PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"p_RunId": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"p_StartTime": {
										"type": "DateTime",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onPremsSqlServer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "hydration pipeline success logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Hydration File From Blob to Azure Sql DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('Start Logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Success')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "hydration pipeline failure logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Hydration File From Blob to Azure Sql DB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ADFEndLogs]",
							"storedProcedureParameters": {
								"p_EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"p_ErrorMessage": {
									"value": {
										"value": "@variables('V_Status_Fail')",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@activity('Start Logs').output.firstRow.id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"p_Status": {
									"value": {
										"value": "@variables('V_Status_Fail')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onPremsSqlserver",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileName": {
						"type": "String",
						"defaultValue": "Hydration File"
					},
					"V_Status_Success": {
						"type": "String",
						"defaultValue": "Success"
					},
					"V_Status_Fail": {
						"type": "String",
						"defaultValue": "Fail"
					}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-27T14:00:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sharepoint')]",
				"[concat(variables('factoryId'), '/datasets/ds_hydration')]",
				"[concat(variables('factoryId'), '/datasets/ds_reportingProjSQLServer')]",
				"[concat(variables('factoryId'), '/datasets/ds_onPremsSqlServer')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onPremsSqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 1 Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch Full Load from Table List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select *\nfrom [client].[hydration]\nwhere LoadType = 'full' and Status='1';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_reportingProjSQLServer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy full load table from onprems to raw adls",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Full Load from Table List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch Full Load from Table List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ', item().sourceSchema, '.', item().sourceTableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_onPremsSqlServer",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_raw",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().sourceTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-20T15:37:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_reportingProjSQLServer')]",
				"[concat(variables('factoryId'), '/datasets/ds_onPremsSqlServer')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 2 Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch Incremental Load Tables list",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select *\nfrom [client].[hydration]\nwhere LoadType = 'inc' and Status = '1';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_reportingProjSQLServer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Increment load tables from onprems to raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Incremental Load Tables list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch Incremental Load Tables list').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "watermarkDatetime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select watermarkDatetime from [client].[watermarkDatetime] where tablename = ''', item().sourceTableName,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_reportingProjSQLServer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "maxModifiedDate of Incremental Tables",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select max(ModifiedDate) as LastModified from ', item().sourceSchema, '.', item().sourceTableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_onPremsSqlServer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Copy incremental load tables of onprems",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "maxModifiedDate of Incremental Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "watermarkDatetime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ', item().sourceSchema, '.', item().sourceTableName, ' where ModifiedDate > ''',activity('watermarkDatetime').output.firstRow.watermarkDatetime,'''', ' and ModifiedDate <= ''', activity('maxModifiedDate of Incremental Tables').output.firstRow.LastModified,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_onPremsSqlServer",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_raw",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().sourceTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "update watermark datetime",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy incremental load tables of onprems",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_reportingProjSQLServer",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update [client].[watermarkDatetime] set watermarkDatetime = ''', activity('maxModifiedDate of Incremental Tables').output.firstRow.LastModified, '''', ' where tablename = ''', item().sourceTableName,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-20T15:37:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_reportingProjSQLServer')]",
				"[concat(variables('factoryId'), '/datasets/ds_onPremsSqlServer')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_reportingProjSQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4 Data_Merge_DBW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DBW_BlOB_TO_DELTA_DATA_MERGE",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/reportingProj/merge data from blob to delta tables"
						},
						"linkedServiceName": {
							"referenceName": "ls_reportingProj_DBW",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-23T04:42:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_reportingProj_DBW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 reportingProj-Transformation-DBW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transformation-DBW",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/reportingProj/transformations"
						},
						"linkedServiceName": {
							"referenceName": "ls_reportingProj_DBW",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "reportingProj-Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-23T04:42:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_reportingProj_DBW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_hydration')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sharepoint",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().FileName, '.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(substring(utcNow(), 0, 4), '/', substring(utcNow(), 5, 2), '/', substring(utcNow(), 8, 2))",
							"type": "Expression"
						},
						"container": "hydration"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sharepoint')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onPremsSqlServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onPremsSqlserver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onPremsSqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().FileName, '.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(substring(utcNow(), 0, 4), '/', substring(utcNow(), 5, 2), '/', substring(utcNow(), 8, 2))",
							"type": "Expression"
						},
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_reportingProjSQLServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_reportingProjSQLServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "client",
					"table": "hydration"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_reportingProjSQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sharepoint')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sharepoint",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Hydration File.xlsx",
						"container": "sharepoint"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sharepoint')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onPremsSqlserver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_onPremsSqlserver_connectionString')]",
					"userName": "[parameters('ls_onPremsSqlserver_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_onPremsSqlserver_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-onPrems",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-onPrems')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_reportingProjSQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_reportingProjSQLServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_reportingProj_DBW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-50567861881400.0.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('ls_reportingProj_DBW_accessToken')]"
					},
					"existingClusterId": "[parameters('ls_reportingProj_DBW_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sharepoint')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_sharepoint_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-onPrems')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "SHIR for reportingProj",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/getting latest file from adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_demo",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_demo_parameterized",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(\n    formatDateTime(activity('Get Metadata2').output.lastModified, 'yyyyMMddHHmmss'), \n    formatDateTime(variables('LastModifiedDate'), 'yyyyMMddHHmmss')\n    )",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LatestFileName",
													"value": {
														"value": "@activity('Get Metadata2').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "LastModifiedDate",
										"value": {
											"value": "@activity('Get Metadata2').output.lastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_demo_parameterized",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('LatestFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_copyLatestFileOP",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"LatestFileName": {
						"type": "String"
					},
					"LastModifiedDate": {
						"type": "String",
						"defaultValue": "1990-01-01T05:12:22Z"
					}
				},
				"folder": {
					"name": "real time scenarios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_demo')]",
				"[concat(variables('factoryId'), '/datasets/ds_demo_parameterized')]",
				"[concat(variables('factoryId'), '/datasets/ds_copyLatestFileOP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_demo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "circuitId",
						"type": "String"
					},
					{
						"name": "circuitRef",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "lng",
						"type": "String"
					},
					{
						"name": "alt",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_demo_parameterized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "dataset().FileName",
							"type": "Expression"
						},
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "circuitId",
						"type": "String"
					},
					{
						"name": "circuitRef",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "lng",
						"type": "String"
					},
					{
						"name": "alt",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_copyLatestFileOP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "copylatestfileop"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		}
	]
}